{
  "address": "0x3B22f0466d98bE3040d2c51dE89b0479FDD48910",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "proposedRate",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalTime",
          "type": "uint256"
        }
      ],
      "name": "InterestRateProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newInterestRate",
          "type": "uint16"
        }
      ],
      "name": "InterestRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        }
      ],
      "name": "MUSDTokenAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newMaxInterestRate",
          "type": "uint16"
        }
      ],
      "name": "MaxInterestRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pcvAddress",
          "type": "address"
        }
      ],
      "name": "PCVAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_A_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "addInterestToRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        }
      ],
      "name": "addPrincipalToRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interestOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        }
      ],
      "name": "calculateDebtAdjustment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principalAdjustment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAdjustment",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_interestRate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        }
      ],
      "name": "getInterestRateData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IInterestRateManager.InterestRateInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "interestRateData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdatedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxInterestRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musdToken",
      "outputs": [
        {
          "internalType": "contract IMUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newProposedInterestRate",
          "type": "uint16"
        }
      ],
      "name": "proposeInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedInterestRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "removeInterestFromRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        }
      ],
      "name": "removePrincipalFromRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_musdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pcvAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newMaxInterestRate",
          "type": "uint16"
        }
      ],
      "name": "setMaxInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        }
      ],
      "name": "updateSystemInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interestOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_rate",
          "type": "uint16"
        }
      ],
      "name": "updateTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principalAdjustment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAdjustment",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde7c52be66567ca1914726403022645c508b64950b8bb11c1c280b288039423b",
  "receipt": {
    "to": null,
    "from": "0x31c57298578f7508B5982062cfEc5ec8BD346247",
    "contractAddress": "0x3B22f0466d98bE3040d2c51dE89b0479FDD48910",
    "transactionIndex": 0,
    "gasUsed": "1136515",
    "logsBloom": "0x
    "blockHash": "0x5df4f26a4690e6446410e9976d0cfe3e008e33c8f61abd48037e2654bd36912a",
    "transactionHash": "0xde7c52be66567ca1914726403022645c508b64950b8bb11c1c280b288039423b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3333548,
        "transactionHash": "0xde7c52be66567ca1914726403022645c508b64950b8bb11c1c280b288039423b",
        "address": "0x3B22f0466d98bE3040d2c51dE89b0479FDD48910",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000031c57298578f7508b5982062cfec5ec8bd346247"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5df4f26a4690e6446410e9976d0cfe3e008e33c8f61abd48037e2654bd36912a"
      }
    ],
    "blockNumber": 3333548,
    "cumulativeGasUsed": "1136515",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5a5924c8769aaafa5a742bdee21ed0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proposedRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalTime\",\"type\":\"uint256\"}],\"name\":\"InterestRateProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newInterestRate\",\"type\":\"uint16\"}],\"name\":\"InterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"}],\"name\":\"MUSDTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newMaxInterestRate\",\"type\":\"uint16\"}],\"name\":\"MaxInterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"}],\"name\":\"PCVAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_A_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"addInterestToRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"}],\"name\":\"addPrincipalToRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"}],\"name\":\"calculateDebtAdjustment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalAdjustment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAdjustment\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_interestRate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calculateInterestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"}],\"name\":\"getInterestRateData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IInterestRateManager.InterestRateInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"interestRateData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInterestRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musdToken\",\"outputs\":[{\"internalType\":\"contract IMUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newProposedInterestRate\",\"type\":\"uint16\"}],\"name\":\"proposeInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedInterestRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"removeInterestFromRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"}],\"name\":\"removePrincipalFromRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_musdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxInterestRate\",\"type\":\"uint16\"}],\"name\":\"setMaxInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"}],\"name\":\"updateSystemInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"}],\"name\":\"updateTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalAdjustment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAdjustment\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InterestRateManager.sol\":\"InterestRateManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/InterestRateManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./token/IMUSD.sol\\\";\\nimport {CheckContract} from \\\"./dependencies/CheckContract.sol\\\";\\nimport {IActivePool} from \\\"./interfaces/IActivePool.sol\\\";\\nimport {IInterestRateManager} from \\\"./interfaces/IInterestRateManager.sol\\\";\\nimport {IPCV} from \\\"./interfaces/IPCV.sol\\\";\\nimport {ITroveManager} from \\\"./interfaces/ITroveManager.sol\\\";\\n\\ncontract InterestRateManager is Ownable, CheckContract, IInterestRateManager {\\n    // Current interest rate per year in basis points\\n    uint16 public interestRate;\\n\\n    // Maximum interest rate that can be set, defaults to 100% (10000 bps)\\n    uint16 public maxInterestRate = 10000;\\n\\n    // Proposed interest rate -- must be approved by governance after a minimum delay\\n    uint16 public proposedInterestRate;\\n    uint256 public proposalTime;\\n\\n    // Minimum time delay between interest rate proposal and approval\\n    uint256 public constant MIN_DELAY = 7 days;\\n    uint256 public constant SECONDS_IN_A_YEAR = 365 * 24 * 60 * 60;\\n\\n    // Mapping from interest rate to total principal and interest owed at that rate\\n    mapping(uint16 => InterestRateInfo) public interestRateData;\\n\\n    IActivePool public activePool;\\n    address public borrowerOperationsAddress;\\n    IMUSD public musdToken;\\n    IPCV internal pcv;\\n    ITroveManager internal troveManager;\\n\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == pcv.council(),\\n            \\\"InterestRateManager: Only governance can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTroveManager() {\\n        require(\\n            msg.sender == address(troveManager),\\n            \\\"InterestRateManager: Only TroveManager may call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperationsOrTroveManager() {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == address(troveManager),\\n            \\\"InterestRateManager: Only BorrowerOperations or TroveManager may call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _troveManagerAddress\\n    ) external onlyOwner {\\n        checkContract(_activePoolAddress);\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_musdTokenAddress);\\n        checkContract(_pcvAddress);\\n        checkContract(_troveManagerAddress);\\n\\n        activePool = IActivePool(_activePoolAddress);\\n        // slither-disable-next-line missing-zero-check\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        musdToken = IMUSD(_musdTokenAddress);\\n        pcv = IPCV(_pcvAddress);\\n        troveManager = ITroveManager(_troveManagerAddress);\\n\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit MUSDTokenAddressChanged(_musdTokenAddress);\\n        emit PCVAddressChanged(_pcvAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function proposeInterestRate(\\n        uint16 _newProposedInterestRate\\n    ) external onlyGovernance {\\n        require(\\n            _newProposedInterestRate <= maxInterestRate,\\n            \\\"Interest rate exceeds the maximum interest rate\\\"\\n        );\\n        proposedInterestRate = _newProposedInterestRate;\\n        // solhint-disable-next-line not-rely-on-time\\n        proposalTime = block.timestamp;\\n        emit InterestRateProposed(proposedInterestRate, proposalTime);\\n    }\\n\\n    function approveInterestRate() external onlyGovernance {\\n        // solhint-disable not-rely-on-time\\n        require(\\n            block.timestamp >= proposalTime + MIN_DELAY,\\n            \\\"Proposal delay not met\\\"\\n        );\\n        // solhint-enable not-rely-on-time\\n        _setInterestRate(proposedInterestRate);\\n    }\\n\\n    function setMaxInterestRate(\\n        uint16 _newMaxInterestRate\\n    ) external onlyGovernance {\\n        maxInterestRate = _newMaxInterestRate;\\n        emit MaxInterestRateUpdated(_newMaxInterestRate);\\n    }\\n\\n    function addPrincipalToRate(\\n        uint16 _rate,\\n        uint256 _principal\\n    ) external onlyBorrowerOperationsOrTroveManager {\\n        interestRateData[_rate].principal += _principal;\\n    }\\n\\n    function updateSystemInterest(uint16 _rate) external {\\n        InterestRateInfo memory _interestRateData = interestRateData[_rate];\\n        // solhint-disable not-rely-on-time\\n        uint256 interest = calculateInterestOwed(\\n            _interestRateData.principal,\\n            _rate,\\n            _interestRateData.lastUpdatedTime,\\n            block.timestamp\\n        );\\n        // solhint-enable not-rely-on-time\\n\\n        addInterestToRate(_rate, interest);\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        interestRateData[_rate].lastUpdatedTime = block.timestamp;\\n\\n        // slither-disable-next-line calls-loop\\n        musdToken.mint(address(pcv), interest);\\n\\n        // slither-disable-next-line calls-loop\\n        activePool.increaseDebt(0, interest);\\n    }\\n\\n    function updateTroveDebt(\\n        uint256 _interestOwed,\\n        uint256 _payment,\\n        uint16 _rate\\n    )\\n        external\\n        onlyTroveManager\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment)\\n    {\\n        if (_payment >= _interestOwed) {\\n            principalAdjustment = _payment - _interestOwed;\\n            interestAdjustment = _interestOwed;\\n        } else {\\n            principalAdjustment = 0;\\n            interestAdjustment = _payment;\\n        }\\n\\n        removeInterestFromRate(_rate, interestAdjustment);\\n        removePrincipalFromRate(_rate, principalAdjustment);\\n    }\\n\\n    function getInterestRateData(\\n        uint16 _rate\\n    ) external view returns (InterestRateInfo memory) {\\n        return interestRateData[_rate];\\n    }\\n\\n    function addInterestToRate(\\n        uint16 _rate,\\n        uint256 _interest\\n    ) public onlyBorrowerOperationsOrTroveManager {\\n        interestRateData[_rate].interest += _interest;\\n    }\\n\\n    function removePrincipalFromRate(\\n        uint16 _rate,\\n        uint256 _principal\\n    ) public onlyBorrowerOperationsOrTroveManager {\\n        interestRateData[_rate].principal -= _principal;\\n    }\\n\\n    function removeInterestFromRate(\\n        uint16 _rate,\\n        uint256 _interest\\n    ) public onlyBorrowerOperationsOrTroveManager {\\n        interestRateData[_rate].interest -= _interest;\\n    }\\n\\n    function calculateInterestOwed(\\n        uint256 _principal,\\n        uint16 _interestRate,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) public pure returns (uint256) {\\n        uint256 timeElapsed = endTime - startTime;\\n        return\\n            (_principal * _interestRate * timeElapsed) /\\n            (10000 * SECONDS_IN_A_YEAR);\\n    }\\n\\n    function calculateDebtAdjustment(\\n        uint256 _interestOwed,\\n        uint256 _payment\\n    )\\n        public\\n        pure\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment)\\n    {\\n        if (_payment >= _interestOwed) {\\n            principalAdjustment = _payment - _interestOwed;\\n            interestAdjustment = _interestOwed;\\n        } else {\\n            principalAdjustment = 0;\\n            interestAdjustment = _payment;\\n        }\\n    }\\n\\n    // slither-disable-start reentrancy-benign\\n    // slither-disable-start reentrancy-events\\n    function _setInterestRate(uint16 _newInterestRate) internal {\\n        require(\\n            _newInterestRate <= maxInterestRate,\\n            \\\"Interest rate exceeds the maximum interest rate\\\"\\n        );\\n        troveManager.updateDefaultPoolInterest();\\n        interestRate = _newInterestRate;\\n        emit InterestRateUpdated(_newInterestRate);\\n    }\\n    // slither-disable-end reentrancy-benign\\n    // slither-disable-end reentrancy-events\\n}\\n\",\"keccak256\":\"0x91c657c79202cc2a756db65cc4578c399cb5df9164c0a066dcec77cae61d25e7\",\"license\":\"GPL-3.0\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1c92d60397339d3632c03c2f024ca294fcdd012e69be518499db42b9f62039d8\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.24;\\n\\ninterface IInterestRateManager {\\n    struct InterestRateInfo {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 lastUpdatedTime;\\n    }\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n\\n    event InterestRateProposed(uint16 proposedRate, uint256 proposalTime);\\n    event InterestRateUpdated(uint16 newInterestRate);\\n    event MaxInterestRateUpdated(uint16 newMaxInterestRate);\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function proposeInterestRate(uint16 _newProposedInterestRate) external;\\n\\n    function approveInterestRate() external;\\n\\n    function setMaxInterestRate(uint16 _newMaxInterestRate) external;\\n\\n    function addPrincipalToRate(uint16 _rate, uint256 _principal) external;\\n\\n    function addInterestToRate(uint16 _rate, uint256 _interest) external;\\n\\n    function removePrincipalFromRate(uint16 _rate, uint256 _principal) external;\\n\\n    function removeInterestFromRate(uint16 _rate, uint256 _interest) external;\\n\\n    function updateSystemInterest(uint16 _rate) external;\\n\\n    function updateTroveDebt(\\n        uint256 _interestOwed,\\n        uint256 _payment,\\n        uint16 _rate\\n    )\\n        external\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n\\n    function interestRate() external view returns (uint16);\\n\\n    function getInterestRateData(\\n        uint16 _rate\\n    ) external view returns (InterestRateInfo memory);\\n\\n    function calculateDebtAdjustment(\\n        uint256 _interestOwed,\\n        uint256 _payment\\n    )\\n        external\\n        pure\\n        returns (uint256 principalAdjustment, uint256 interestAdjustment);\\n\\n    function calculateInterestOwed(\\n        uint256 _principal,\\n        uint16 _interestRate,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xa863eb64bbc36b0a8e93af56c4cea86d78a6594db7d59a2321d9105e771e7dcd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPCV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/IMUSD.sol\\\";\\n\\ninterface IPCV {\\n    // --- Events --\\n    event MUSDTokenAddressSet(address _musdTokenAddress);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n\\n    event RolesSet(address _council, address _treasury);\\n    event MUSDWithdraw(address _recipient, uint256 _amount);\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\n    event PCVDebtPaid(uint256 _paidDebt);\\n    event RecipientAdded(address _recipient);\\n    event RecipientRemoved(address _recipient);\\n    event PCVFeePaid(address _recipient, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function debtToPay() external returns (uint256);\\n\\n    function payDebt(uint256 _musdToBurn) external;\\n\\n    function setAddresses(\\n        address _borrowerOperations,\\n        address _musdTokenAddress\\n    ) external;\\n\\n    function initialize() external;\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    function setFeeSplit(uint8 _feeSplitPercentage) external;\\n\\n    function withdrawMUSD(address _recipient, uint256 _musdAmount) external;\\n\\n    function withdrawCollateral(\\n        address _recipient,\\n        uint256 _collateralAmount\\n    ) external;\\n\\n    function addRecipientToWhitelist(address _recipient) external;\\n\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\n\\n    function removeRecipientFromWhitelist(address _recipient) external;\\n\\n    function removeRecipientsFromWhitelist(\\n        address[] calldata _recipients\\n    ) external;\\n\\n    function startChangingRoles(address _council, address _treasury) external;\\n\\n    function cancelChangingRoles() external;\\n\\n    function finalizeChangingRoles() external;\\n\\n    function musd() external view returns (IMUSD);\\n\\n    function council() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa78959fcd0c1e947e462caf2c7696c726181d03ddea43ce616e4a381dbe4d9b3\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x2476d686c183f333a23177ccaf2573f8e8227e255bf7fcf96448f7c35a40a0f1\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/*\\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event PUpdated(uint256 _P);\\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event CollateralGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _collateral,\\n        uint256 _MUSDLoss\\n    );\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _musdTokenAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     * - Decreases deposit stake, and takes new snapshot.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some collateral gain\\n     * ---\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit\\n     */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like collateral received from a self-destruct.\\n     */\\n    function getCollateralBalance() external view returns (uint);\\n\\n    /*\\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalMUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4988086774090e67fe8081b93174b87cd03fbcc35473136d91d4d822b37a740f\",\"license\":\"MIT\"},\"contracts/interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IPCV.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager {\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    struct InterestRateChange {\\n        uint16 interestRate;\\n        uint256 blockNumber;\\n    }\\n\\n    // --- Events ---\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedPrincipal,\\n        uint256 _liquidatedInterest,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _gasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedAmount,\\n        uint256 _actualAmount,\\n        uint256 _collateralSent,\\n        uint256 _collateralFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        uint256 _totalStakesSnapshot,\\n        uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveSnapshotsUpdated(\\n        uint256 _L_Collateral,\\n        uint256 _L_Principal,\\n        uint256 _L_Interest\\n    );\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _stabilityPoolAddress\\n    ) external;\\n\\n    function liquidate(address _borrower) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint256 _amount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(\\n        address _borrower\\n    ) external returns (uint);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(\\n        address _borrower\\n    ) external returns (uint256 index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function setTroveStatus(address _borrower, Status _status) external;\\n\\n    function setTroveMaxBorrowingCapacity(\\n        address _borrower,\\n        uint256 _maxBorrowingCapacity\\n    ) external;\\n\\n    function updateDefaultPoolInterest() external;\\n\\n    function updateSystemAndTroveInterest(address _borrower) external;\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint);\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint);\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external returns (uint256, uint256);\\n\\n    function setTroveInterestRate(address _borrower, uint16 _rate) external;\\n\\n    function setTroveLastInterestUpdateTime(\\n        address _borrower,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function pcv() external view returns (IPCV);\\n\\n    function getTroveOwnersCount() external view returns (uint);\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function getTroveInterestOwed(\\n        address _borrower\\n    ) external view returns (uint256);\\n\\n    function getTrovePrincipal(address _borrower) external view returns (uint);\\n\\n    function getNominalICR(address _borrower) external view returns (uint);\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) external view returns (uint);\\n\\n    function getPendingCollateral(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getPendingDebt(\\n        address _borrower\\n    ) external view returns (uint256, uint256);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 coll,\\n            uint256 principal,\\n            uint256 interest,\\n            uint256 pendingCollateral,\\n            uint256 pendingPrincipal,\\n            uint256 pendingInterest\\n        );\\n\\n    function getRedemptionRate() external view returns (uint);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint);\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _collateralDrawn\\n    ) external view returns (uint);\\n\\n    function getBorrowingRate() external view returns (uint);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint);\\n\\n    function getBorrowingFee(uint256 _debt) external view returns (uint);\\n\\n    function getBorrowingFeeWithDecay(\\n        uint256 _debt\\n    ) external view returns (uint);\\n\\n    function getTroveStatus(address _borrower) external view returns (Status);\\n\\n    function getTroveStake(address _borrower) external view returns (uint);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n\\n    function getTroveInterestRate(\\n        address _borrower\\n    ) external view returns (uint16);\\n\\n    function getTroveLastInterestUpdateTime(\\n        address _borrower\\n    ) external view returns (uint);\\n\\n    function getTroveColl(address _borrower) external view returns (uint);\\n\\n    function getTCR(uint256 _price) external view returns (uint);\\n\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x14774fba145999c49d0fff49dc484ff673e677796dbd55784014bd82ff0c405c\",\"license\":\"MIT\"},\"contracts/token/IMUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IMUSD is IERC20Metadata, IERC20Permit {\\n    // --- Events ---\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\n    event BalanceUpdated(address _user, uint256 _amount);\\n    event InterestRateManagerAddressAdded(address _interestRateManagerAddress);\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\n\\n    // --- Governance Functions ---\\n    function cancelAddContracts() external;\\n\\n    function cancelAddMintList() external;\\n\\n    function cancelRevokeBurnList() external;\\n\\n    function cancelRevokeMintList() external;\\n\\n    function startAddContracts(\\n        address _troveManagerAddress,\\n        address _stabilityPoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _interestRateManagerAddress\\n    ) external;\\n\\n    function startAddMintList(address _account) external;\\n\\n    function startRevokeBurnList(address _account) external;\\n\\n    function startRevokeMintList(address _account) external;\\n\\n    function finalizeAddContracts() external;\\n\\n    function finalizeAddMintList() external;\\n\\n    function finalizeRevokeBurnList() external;\\n\\n    function finalizeRevokeMintList() external;\\n\\n    // --- External Functions ---\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burnList(address contractAddress) external view returns (bool);\\n\\n    function mintList(address contractAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x87733ae6378e124af9fffbba7334f5f2330a1786c601d2da70dd800ee95500b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7680,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "interestRate",
        "offset": 20,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 7683,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "maxInterestRate",
        "offset": 22,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 7685,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "proposedInterestRate",
        "offset": 24,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 7687,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "proposalTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7704,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "interestRateData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_struct(InterestRateInfo)27201_storage)"
      },
      {
        "astId": 7707,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "activePool",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IActivePool)26847"
      },
      {
        "astId": 7709,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7712,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "musdToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMUSD)28865"
      },
      {
        "astId": 7715,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "pcv",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPCV)27499"
      },
      {
        "astId": 7718,
        "contract": "contracts/InterestRateManager.sol:InterestRateManager",
        "label": "troveManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ITroveManager)28380"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IActivePool)26847": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(IMUSD)28865": {
        "encoding": "inplace",
        "label": "contract IMUSD",
        "numberOfBytes": "20"
      },
      "t_contract(IPCV)27499": {
        "encoding": "inplace",
        "label": "contract IPCV",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)28380": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint16,t_struct(InterestRateInfo)27201_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct IInterestRateManager.InterestRateInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(InterestRateInfo)27201_storage"
      },
      "t_struct(InterestRateInfo)27201_storage": {
        "encoding": "inplace",
        "label": "struct IInterestRateManager.InterestRateInfo",
        "members": [
          {
            "astId": 27196,
            "contract": "contracts/InterestRateManager.sol:InterestRateManager",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 27198,
            "contract": "contracts/InterestRateManager.sol:InterestRateManager",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 27200,
            "contract": "contracts/InterestRateManager.sol:InterestRateManager",
            "label": "lastUpdatedTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}