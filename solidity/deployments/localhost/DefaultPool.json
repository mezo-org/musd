{
  "address": "0x318e6b0D4E8112aF08e9BfbECfb14e152fE7855d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newActivePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "CollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newDefaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateral",
          "type": "uint256"
        }
      ],
      "name": "DefaultPoolCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "DefaultPoolDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newStabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activePoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "decreaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastInterestUpdatedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendCollateralToActivePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xedb8d0a64a5c467a3cb8962eabd5d8263e437b614db037df31f120bb6edcf605",
  "receipt": {
    "to": null,
    "from": "0x31c57298578f7508B5982062cfEc5ec8BD346247",
    "contractAddress": "0x318e6b0D4E8112aF08e9BfbECfb14e152fE7855d",
    "transactionIndex": 0,
    "gasUsed": "586202",
    "logsBloom": "0x
    "blockHash": "0xf74d2eeb3f66f929f15bf5883055011148466bd93657c6f5838055486385990b",
    "transactionHash": "0xedb8d0a64a5c467a3cb8962eabd5d8263e437b614db037df31f120bb6edcf605",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3333557,
        "transactionHash": "0xedb8d0a64a5c467a3cb8962eabd5d8263e437b614db037df31f120bb6edcf605",
        "address": "0x318e6b0D4E8112aF08e9BfbECfb14e152fE7855d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000031c57298578f7508b5982062cfec5ec8bd346247"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf74d2eeb3f66f929f15bf5883055011148466bd93657c6f5838055486385990b"
      }
    ],
    "blockNumber": 3333557,
    "cumulativeGasUsed": "586202",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5a5924c8769aaafa5a742bdee21ed0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newActivePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"CollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollateralSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDefaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"DefaultPoolCollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"DefaultPoolDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newStabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastInterestUpdatedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendCollateralToActivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DefaultPool.sol\":\"DefaultPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/DefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/SendCollateral.sol\\\";\\nimport \\\"./interfaces/IActivePool.sol\\\";\\nimport \\\"./interfaces/IDefaultPool.sol\\\";\\n\\n/*\\n * The Default Pool holds the collateral and debt (but not mUSD tokens) from liquidations that have been redistributed\\n * to active troves but not yet \\\"applied\\\", i.e. not yet recorded on a recipient active trove's struct.\\n *\\n * When a trove makes an operation that applies its pending collateral and debt, its pending collateral and debt is moved\\n * from the Default Pool to the Active Pool.\\n */\\ncontract DefaultPool is Ownable, CheckContract, SendCollateral, IDefaultPool {\\n    address public activePoolAddress;\\n    address public troveManagerAddress;\\n\\n    uint256 internal collateral; // deposited collateral tracker\\n    uint256 internal principal;\\n    uint256 internal interest;\\n    uint256 internal lastInterestUpdatedTime;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // solhint-disable no-complex-fallback\\n    receive() external payable {\\n        _requireCallerIsActivePool();\\n        collateral += msg.value;\\n        emit DefaultPoolCollateralBalanceUpdated(collateral);\\n    }\\n\\n    // --- Dependency setters ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _troveManagerAddress\\n    ) external onlyOwner {\\n        checkContract(_activePoolAddress);\\n        checkContract(_troveManagerAddress);\\n\\n        // slither-disable-start missing-zero-check\\n        activePoolAddress = _activePoolAddress;\\n        troveManagerAddress = _troveManagerAddress;\\n        // slither-disable-end missing-zero-check\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function increaseDebt(\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external override {\\n        _requireCallerIsTroveManager();\\n        principal += _principal;\\n        interest += _interest;\\n        // solhint-disable-next-line not-rely-on-time\\n        lastInterestUpdatedTime = block.timestamp;\\n        emit DefaultPoolDebtUpdated(principal, interest);\\n    }\\n\\n    function decreaseDebt(\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external override {\\n        _requireCallerIsTroveManager();\\n        principal -= _principal;\\n        interest -= _interest;\\n        // solhint-disable-next-line not-rely-on-time\\n        lastInterestUpdatedTime = block.timestamp;\\n        emit DefaultPoolDebtUpdated(principal, interest);\\n    }\\n\\n    function sendCollateralToActivePool(uint256 _amount) external override {\\n        _requireCallerIsTroveManager();\\n        address activePool = activePoolAddress; // cache to save an SLOAD\\n        collateral -= _amount;\\n        emit DefaultPoolCollateralBalanceUpdated(collateral);\\n        emit CollateralSent(activePool, _amount);\\n\\n        _sendCollateral(activePool, _amount);\\n    }\\n\\n    function getCollateralBalance() external view override returns (uint) {\\n        return collateral;\\n    }\\n\\n    function getDebt() external view override returns (uint) {\\n        return principal + interest;\\n    }\\n\\n    function getPrincipal() external view override returns (uint) {\\n        return principal;\\n    }\\n\\n    function getInterest() external view override returns (uint) {\\n        return interest;\\n    }\\n\\n    function getLastInterestUpdatedTime()\\n        external\\n        view\\n        override\\n        returns (uint)\\n    {\\n        return lastInterestUpdatedTime;\\n    }\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(\\n            msg.sender == troveManagerAddress,\\n            \\\"DefaultPool: Caller is not the TroveManager\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsActivePool() internal view {\\n        require(\\n            msg.sender == activePoolAddress,\\n            \\\"DefaultPool: Caller is not the ActivePool\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe281034ec1306b1ea3417e04912ea5c3c545b656b10d5aa36c9147f12015438a\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/dependencies/SendCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract SendCollateral {\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function _sendCollateral(address _recipient, uint256 _amount) internal {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n        require(success, \\\"Sending BTC failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x107aa2ed3410d2a210c6f829b7f49dea3280136b2f88daf489236eaaa9746048\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1c92d60397339d3632c03c2f024ca294fcdd012e69be518499db42b9f62039d8\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateralToActivePool(uint256 _amount) external;\\n\\n    function getLastInterestUpdatedTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa17e8c85a1cc091d7dbff1563c799cbf6ddb1bdb2be966b4c2d2497886f0183d\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x2476d686c183f333a23177ccaf2573f8e8227e255bf7fcf96448f7c35a40a0f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61092b806100a56000396000f3fe6080604052600436106100c15760003560e01c80638da5cb5b1161006f5780638da5cb5b146101f457806390107afe14610212578063a69bdf1614610232578063ab11fadd14610247578063b08bc72214610267578063e5a4bed314610287578063f2fde38b1461029c57600080fd5b806310710f721461012257806314a6bf0f146101465780631529a6391461015b57806354c46661146101705780635a4d28bb14610192578063715018a6146101bf5780637df17502146101d457600080fd5b3661011d576100ce6102bc565b34600360008282546100e09190610809565b90915550506003546040519081527fa7a66beb44646a3c65a43d8f42c1a68514ad28ce06bf8777e6209712ea56d8079060200160405180910390a1005b600080fd5b34801561012e57600080fd5b506006545b6040519081526020015b60405180910390f35b34801561015257600080fd5b5061013361032f565b34801561016757600080fd5b50600354610133565b34801561017c57600080fd5b5061019061018b366004610822565b610346565b005b34801561019e57600080fd5b506002546101b2906001600160a01b031681565b60405161013d9190610844565b3480156101cb57600080fd5b506101906103cb565b3480156101e057600080fd5b506101906101ef366004610858565b6103dd565b34801561020057600080fd5b506000546001600160a01b03166101b2565b34801561021e57600080fd5b5061019061022d36600461088d565b610494565b34801561023e57600080fd5b50600454610133565b34801561025357600080fd5b50610190610262366004610822565b610555565b34801561027357600080fd5b506001546101b2906001600160a01b031681565b34801561029357600080fd5b50600554610133565b3480156102a857600080fd5b506101906102b73660046108c0565b610588565b6001546001600160a01b0316331461032d5760405162461bcd60e51b815260206004820152602960248201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865204160448201526818dd1a5d99541bdbdb60ba1b60648201526084015b60405180910390fd5b565b60006005546004546103419190610809565b905090565b61034e6105c6565b81600460008282546103609190610809565b9250508190555080600560008282546103799190610809565b9091555050426006556004546005546040517f709cd28e2d49c68e97accc2eef5d6d07cc43b0a04c3d112aa6966a6da123b367926103bf92908252602082015260400190565b60405180910390a15050565b6103d3610634565b61032d6000610661565b6103e56105c6565b600154600380546001600160a01b03909216918391906000906104099084906108e2565b90915550506003546040519081527fa7a66beb44646a3c65a43d8f42c1a68514ad28ce06bf8777e6209712ea56d8079060200160405180910390a1604080516001600160a01b0383168152602081018490527f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c910160405180910390a161049081836106b1565b5050565b61049c610634565b6104a58261074e565b6104ae8161074e565b600180546001600160a01b038085166001600160a01b03199283161790925560028054928416929091169190911790556040517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a56789061050e908390610844565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd882826040516105459190610844565b60405180910390a16104906103cb565b61055d6105c6565b816004600082825461056f91906108e2565b92505081905550806005600082825461037991906108e2565b610590610634565b6001600160a01b0381166105ba576000604051631e4fbdf760e01b81526004016103249190610844565b6105c381610661565b50565b6002546001600160a01b0316331461032d5760405162461bcd60e51b815260206004820152602b60248201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865205460448201526a3937bb32a6b0b730b3b2b960a91b6064820152608401610324565b6000546001600160a01b0316331461032d573360405163118cdaa760e01b81526004016103249190610844565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146106fe576040519150601f19603f3d011682016040523d82523d6000602084013e610703565b606091505b50509050806107495760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b6044820152606401610324565b505050565b6001600160a01b0381166107a45760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610324565b803b806104905760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610324565b634e487b7160e01b600052601160045260246000fd5b8082018082111561081c5761081c6107f3565b92915050565b6000806040838503121561083557600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b60006020828403121561086a57600080fd5b5035919050565b80356001600160a01b038116811461088857600080fd5b919050565b600080604083850312156108a057600080fd5b6108a983610871565b91506108b760208401610871565b90509250929050565b6000602082840312156108d257600080fd5b6108db82610871565b9392505050565b8181038181111561081c5761081c6107f356fea26469706673582212205e47b95a048b36835e143aa385bcc7e41abfd70543e75291ed7a47a676a7ea4264736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100c15760003560e01c80638da5cb5b1161006f5780638da5cb5b146101f457806390107afe14610212578063a69bdf1614610232578063ab11fadd14610247578063b08bc72214610267578063e5a4bed314610287578063f2fde38b1461029c57600080fd5b806310710f721461012257806314a6bf0f146101465780631529a6391461015b57806354c46661146101705780635a4d28bb14610192578063715018a6146101bf5780637df17502146101d457600080fd5b3661011d576100ce6102bc565b34600360008282546100e09190610809565b90915550506003546040519081527fa7a66beb44646a3c65a43d8f42c1a68514ad28ce06bf8777e6209712ea56d8079060200160405180910390a1005b600080fd5b34801561012e57600080fd5b506006545b6040519081526020015b60405180910390f35b34801561015257600080fd5b5061013361032f565b34801561016757600080fd5b50600354610133565b34801561017c57600080fd5b5061019061018b366004610822565b610346565b005b34801561019e57600080fd5b506002546101b2906001600160a01b031681565b60405161013d9190610844565b3480156101cb57600080fd5b506101906103cb565b3480156101e057600080fd5b506101906101ef366004610858565b6103dd565b34801561020057600080fd5b506000546001600160a01b03166101b2565b34801561021e57600080fd5b5061019061022d36600461088d565b610494565b34801561023e57600080fd5b50600454610133565b34801561025357600080fd5b50610190610262366004610822565b610555565b34801561027357600080fd5b506001546101b2906001600160a01b031681565b34801561029357600080fd5b50600554610133565b3480156102a857600080fd5b506101906102b73660046108c0565b610588565b6001546001600160a01b0316331461032d5760405162461bcd60e51b815260206004820152602960248201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865204160448201526818dd1a5d99541bdbdb60ba1b60648201526084015b60405180910390fd5b565b60006005546004546103419190610809565b905090565b61034e6105c6565b81600460008282546103609190610809565b9250508190555080600560008282546103799190610809565b9091555050426006556004546005546040517f709cd28e2d49c68e97accc2eef5d6d07cc43b0a04c3d112aa6966a6da123b367926103bf92908252602082015260400190565b60405180910390a15050565b6103d3610634565b61032d6000610661565b6103e56105c6565b600154600380546001600160a01b03909216918391906000906104099084906108e2565b90915550506003546040519081527fa7a66beb44646a3c65a43d8f42c1a68514ad28ce06bf8777e6209712ea56d8079060200160405180910390a1604080516001600160a01b0383168152602081018490527f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c910160405180910390a161049081836106b1565b5050565b61049c610634565b6104a58261074e565b6104ae8161074e565b600180546001600160a01b038085166001600160a01b03199283161790925560028054928416929091169190911790556040517f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a56789061050e908390610844565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd882826040516105459190610844565b60405180910390a16104906103cb565b61055d6105c6565b816004600082825461056f91906108e2565b92505081905550806005600082825461037991906108e2565b610590610634565b6001600160a01b0381166105ba576000604051631e4fbdf760e01b81526004016103249190610844565b6105c381610661565b50565b6002546001600160a01b0316331461032d5760405162461bcd60e51b815260206004820152602b60248201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865205460448201526a3937bb32a6b0b730b3b2b960a91b6064820152608401610324565b6000546001600160a01b0316331461032d573360405163118cdaa760e01b81526004016103249190610844565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146106fe576040519150601f19603f3d011682016040523d82523d6000602084013e610703565b606091505b50509050806107495760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b6044820152606401610324565b505050565b6001600160a01b0381166107a45760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610324565b803b806104905760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610324565b634e487b7160e01b600052601160045260246000fd5b8082018082111561081c5761081c6107f3565b92915050565b6000806040838503121561083557600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b60006020828403121561086a57600080fd5b5035919050565b80356001600160a01b038116811461088857600080fd5b919050565b600080604083850312156108a057600080fd5b6108a983610871565b91506108b760208401610871565b90509250929050565b6000602082840312156108d257600080fd5b6108db82610871565b9392505050565b8181038181111561081c5761081c6107f356fea26469706673582212205e47b95a048b36835e143aa385bcc7e41abfd70543e75291ed7a47a676a7ea4264736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6896,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "activePoolAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6898,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "troveManagerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6900,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6902,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "principal",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6904,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "interest",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6906,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "lastInterestUpdatedTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}