{
  "address": "0x1cd89D59208f8E16344eD2D4D98A99e1f208fbec",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newActivePoolAddress",
          "type": "address"
        }
      ],
      "name": "ActivePoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collateral",
          "type": "uint256"
        }
      ],
      "name": "ActivePoolCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "ActivePoolDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newBorrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newCollSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "CollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newDefaultPoolAddress",
          "type": "address"
        }
      ],
      "name": "DefaultPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_interestRateManagerAddress",
          "type": "address"
        }
      ],
      "name": "InterestRateManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newStabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTroveManagerAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "decreaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7034ec0c8815a0003d0c50515170133f55f74edab1f24c83ada70059c572ca23",
  "receipt": {
    "to": null,
    "from": "0x31c57298578f7508B5982062cfEc5ec8BD346247",
    "contractAddress": "0x1cd89D59208f8E16344eD2D4D98A99e1f208fbec",
    "transactionIndex": 0,
    "gasUsed": "771923",
    "logsBloom": "0x
    "blockHash": "0x3d906c25c543a01664205fc56d21881c7eb19d7d5474b84c55b243937e64945d",
    "transactionHash": "0x7034ec0c8815a0003d0c50515170133f55f74edab1f24c83ada70059c572ca23",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3333556,
        "transactionHash": "0x7034ec0c8815a0003d0c50515170133f55f74edab1f24c83ada70059c572ca23",
        "address": "0x1cd89D59208f8E16344eD2D4D98A99e1f208fbec",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000031c57298578f7508b5982062cfec5ec8bd346247"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3d906c25c543a01664205fc56d21881c7eb19d7d5474b84c55b243937e64945d"
      }
    ],
    "blockNumber": 3333556,
    "cumulativeGasUsed": "771923",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5a5924c8769aaafa5a742bdee21ed0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newActivePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"ActivePoolCollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"ActivePoolDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCollSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"CollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollateralSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDefaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_interestRateManagerAddress\",\"type\":\"address\"}],\"name\":\"InterestRateManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newStabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ActivePool.sol\":\"ActivePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/ActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./dependencies/CheckContract.sol\\\";\\nimport \\\"./dependencies/SendCollateral.sol\\\";\\nimport \\\"./interfaces/IActivePool.sol\\\";\\nimport \\\"./interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./interfaces/IDefaultPool.sol\\\";\\nimport \\\"./interfaces/IStabilityPool.sol\\\";\\n\\n/*\\n * The Active Pool holds the collateral and debt (but not mUSD tokens) for all active troves.\\n *\\n * When a trove is liquidated, it's collateral and debt are transferred from the Active Pool, to either the\\n * Stability Pool, the Default Pool, or both, depending on the liquidation conditions.\\n *\\n */\\ncontract ActivePool is Ownable, CheckContract, SendCollateral, IActivePool {\\n    address public borrowerOperationsAddress;\\n    address public collSurplusPoolAddress;\\n    address public defaultPoolAddress;\\n    address public interestRateManagerAddress;\\n    address public stabilityPoolAddress;\\n    address public troveManagerAddress;\\n\\n    uint256 internal collateral; // deposited collateral tracker\\n    uint256 internal principal;\\n    uint256 internal interest;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // --- Fallback function ---\\n\\n    // This executes when the contract receives BTC\\n    // solhint-disable no-complex-fallback\\n    receive() external payable {\\n        _requireCallerIsBorrowerOperationsOrDefaultPool();\\n        collateral += msg.value;\\n        emit ActivePoolCollateralBalanceUpdated(collateral);\\n    }\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _stabilityPoolAddress,\\n        address _troveManagerAddress\\n    ) external onlyOwner {\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_interestRateManagerAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_troveManagerAddress);\\n\\n        // slither-disable-start missing-zero-check\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        collSurplusPoolAddress = _collSurplusPoolAddress;\\n        defaultPoolAddress = _defaultPoolAddress;\\n        interestRateManagerAddress = _interestRateManagerAddress;\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        troveManagerAddress = _troveManagerAddress;\\n        // slither-disable-end missing-zero-check\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit InterestRateManagerAddressChanged(_interestRateManagerAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n\\n        renounceOwnership();\\n    }\\n\\n    function increaseDebt(\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external override {\\n        _requireCallerIsBorrowerOperationsOrTroveManagerOrInterestRateManager();\\n        principal += _principal;\\n        interest += _interest;\\n        emit ActivePoolDebtUpdated(principal, interest);\\n    }\\n\\n    function decreaseDebt(\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external override {\\n        _requireCallerIsBOorTroveMorSP();\\n        principal -= _principal;\\n        interest -= _interest;\\n        emit ActivePoolDebtUpdated(principal, interest);\\n    }\\n\\n    function sendCollateral(address _account, uint256 _amount) external {\\n        _requireCallerIsBOorTroveMorSP();\\n        collateral -= _amount;\\n        emit ActivePoolCollateralBalanceUpdated(collateral);\\n        emit CollateralSent(_account, _amount);\\n\\n        _sendCollateral(_account, _amount);\\n    }\\n\\n    /*\\n     * Returns the collateral state variable.\\n     *\\n     * Not necessarily equal to the the contract's raw collateral balance - collateral can be forcibly sent to contracts.\\n     */\\n    function getCollateralBalance() external view override returns (uint) {\\n        return collateral;\\n    }\\n\\n    function getDebt() external view override returns (uint) {\\n        return principal + interest;\\n    }\\n\\n    function getPrincipal() external view override returns (uint) {\\n        return principal;\\n    }\\n\\n    function getInterest() external view override returns (uint) {\\n        return interest;\\n    }\\n\\n    function _requireCallerIsBorrowerOperationsOrDefaultPool() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == defaultPoolAddress,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor Default Pool\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBorrowerOperationsOrTroveManagerOrInterestRateManager()\\n        internal\\n        view\\n    {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == troveManagerAddress ||\\n                msg.sender == interestRateManagerAddress,\\n            \\\"ActivePool: Caller must be BorrowerOperations, TroveManager, or InterestRateManager\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBOorTroveMorSP() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress ||\\n                msg.sender == troveManagerAddress ||\\n                msg.sender == stabilityPoolAddress,\\n            \\\"ActivePool: Caller is neither BorrowerOperations nor TroveManager nor StabilityPool\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x80a3ee1715e5342f8f6a92f6949c73927e3c9d790bdb2208b968719c7d854b11\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab260c88c1d2f0ffbbd5d43c4a1df5e48132678e67fc24b65fa2d823f97cbc32\",\"license\":\"MIT\"},\"contracts/dependencies/SendCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ncontract SendCollateral {\\n    /**\\n     * Sends collateral to recipient\\n     */\\n    function _sendCollateral(address _recipient, uint256 _amount) internal {\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = _recipient.call{value: _amount}(\\\"\\\"); // re-entry is fine here\\n        require(success, \\\"Sending BTC failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x107aa2ed3410d2a210c6f829b7f49dea3280136b2f88daf489236eaaa9746048\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\n    event InterestRateManagerAddressChanged(\\n        address _interestRateManagerAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event ActivePoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateral(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1c92d60397339d3632c03c2f024ca294fcdd012e69be518499db42b9f62039d8\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event MUSDTokenAddressChanged(address _musdTokenAddress);\\n    event PCVAddressChanged(address _pcvAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event BorrowingFeePaid(address indexed _borrower, uint256 _fee);\\n    event RefinancingFeePaid(address indexed _borrower, uint256 _fee);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _defaultPoolAddress,\\n        address _gasPoolAddress,\\n        address _interestRateManagerAddress,\\n        address _musdTokenAddress,\\n        address _pcvAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _stabilityPoolAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function setRefinancingFeePercentage(\\n        uint8 _refinanceFeePercentage\\n    ) external;\\n\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function openTroveWithSignature(\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint,\\n        address _borrower,\\n        bytes memory _signature,\\n        uint256 _deadline\\n    ) external payable;\\n\\n    function addColl(\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function moveCollateralGainToTrove(\\n        address _borrower,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawMUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayMUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function refinance(uint256 _maxFeePercentage) external;\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xeab2259745384dfa853ac2e0877b63374130927e80f27946220dd57eb363b584\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    function claimColl(address _account) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getCollateral(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x32f4472f75ebcfc9ddbb651afd451a2a8988184e1ea3313aaee8b4e7c56699ac\",\"license\":\"MIT\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolDebtUpdated(uint256 _principal, uint256 _interest);\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\n\\n    // --- Functions ---\\n    function sendCollateralToActivePool(uint256 _amount) external;\\n\\n    function getLastInterestUpdatedTime() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa17e8c85a1cc091d7dbff1563c799cbf6ddb1bdb2be966b4c2d2497886f0183d\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\n\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function increaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function decreaseDebt(uint256 _principal, uint256 _interest) external;\\n\\n    function getCollateralBalance() external view returns (uint);\\n\\n    function getDebt() external view returns (uint);\\n\\n    function getPrincipal() external view returns (uint);\\n\\n    function getInterest() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x2476d686c183f333a23177ccaf2573f8e8227e255bf7fcf96448f7c35a40a0f1\",\"license\":\"MIT\"},\"contracts/interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/*\\n * The Stability Pool holds mUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * mUSD in the Stability Pool: that is, the offset debt evaporates, and an equal amount of mUSD tokens in the Stability Pool are burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a mUSD loss in proportion to their deposit as a share of total deposits.\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total mUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolMUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event BorrowerOperationsAddressChanged(\\n        address _newBorrowerOperationsAddress\\n    );\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event MUSDTokenAddressChanged(address _newMUSDTokenAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\n    event PUpdated(uint256 _P);\\n    event SUpdated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _S\\n    );\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event CollateralGainWithdrawn(\\n        address indexed _depositor,\\n        uint256 _collateral,\\n        uint256 _MUSDLoss\\n    );\\n    event CollateralSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _activePoolAddress,\\n        address _borrowerOperationsAddress,\\n        address _musdTokenAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _troveManagerAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\n     */\\n    function provideToSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\n     * - Decreases deposit stake, and takes new snapshot.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some collateral gain\\n     * ---\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit\\n     */\\n    function withdrawCollateralGainToTrove(\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the mUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like collateral received from a self-destruct.\\n     */\\n    function getCollateralBalance() external view returns (uint);\\n\\n    /*\\n     * Returns mUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalMUSDDeposits() external view returns (uint);\\n\\n    /*\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorCollateralGain(\\n        address _depositor\\n    ) external view returns (uint);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedMUSDDeposit(\\n        address _depositor\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4988086774090e67fe8081b93174b87cd03fbcc35473136d91d4d822b37a740f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c86806100a56000396000f3fe6080604052600436106100e25760003560e01c8063715018a611610085578063715018a6146102535780637c04cce1146102685780638da5cb5b14610288578063a69bdf16146102a6578063aac1846f146102bb578063ab11fadd146102db578063b7f8cf9b146102fb578063e5a4bed31461031b578063f2fde38b1461033057600080fd5b80630b622ab21461014357806314a6bf0f146101795780631529a6391461019c5780632a9043ec146101b157806354c46661146101d15780635a4d28bb146101f357806362502169146102135780636cfb6bf91461023357600080fd5b3661013e576100ef610350565b34600760008282546101019190610b12565b90915550506007546040519081527f51e7c30439c76308c020a84ca2a666735d3baa69d070e13beaf83e15bb697eb39060200160405180910390a1005b600080fd5b34801561014f57600080fd5b50600554610163906001600160a01b031681565b6040516101709190610b2b565b60405180910390f35b34801561018557600080fd5b5061018e6103f6565b604051908152602001610170565b3480156101a857600080fd5b5060075461018e565b3480156101bd57600080fd5b50600254610163906001600160a01b031681565b3480156101dd57600080fd5b506101f16101ec366004610b3f565b61040d565b005b3480156101ff57600080fd5b50600654610163906001600160a01b031681565b34801561021f57600080fd5b506101f161022e366004610b7d565b61048e565b34801561023f57600080fd5b506101f161024e366004610ba7565b610533565b34801561025f57600080fd5b506101f161072e565b34801561027457600080fd5b50600454610163906001600160a01b031681565b34801561029457600080fd5b506000546001600160a01b0316610163565b3480156102b257600080fd5b5060085461018e565b3480156102c757600080fd5b50600354610163906001600160a01b031681565b3480156102e757600080fd5b506101f16102f6366004610b3f565b610740565b34801561030757600080fd5b50600154610163906001600160a01b031681565b34801561032757600080fd5b5060095461018e565b34801561033c57600080fd5b506101f161034b366004610c1b565b610773565b6001546001600160a01b031633148061037357506003546001600160a01b031633145b6103f45760405162461bcd60e51b815260206004820152604160248201527f416374697665506f6f6c3a2043616c6c6572206973206e65697468657220426f60448201527f72726f7765724f7065726174696f6e73206e6f722044656661756c7420506f6f6064820152601b60fa1b608482015260a4015b60405180910390fd5b565b60006009546008546104089190610b12565b905090565b6104156107b1565b81600860008282546104279190610b12565b9250508190555080600960008282546104409190610b12565b90915550506008546009546040517f9c9231087215d0ccca20a3c98640429f2ea8bdd6498c53843c06d1138b8c94fa9261048292908252602082015260400190565b60405180910390a15050565b610496610877565b80600760008282546104a89190610c3d565b90915550506007546040519081527f51e7c30439c76308c020a84ca2a666735d3baa69d070e13beaf83e15bb697eb39060200160405180910390a1604080516001600160a01b0384168152602081018390527f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c910160405180910390a161052f828261093d565b5050565b61053b6109da565b61054486610a07565b61054d85610a07565b61055684610a07565b61055f83610a07565b61056882610a07565b61057181610a07565b600180546001600160a01b03199081166001600160a01b0389811691909117909255600280548216888416179055600380548216878416179055600480548216868416179055600580548216858416179055600680549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed98590610603908890610b2b565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d8560405161063a9190610b2b565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b846040516106719190610b2b565b60405180910390a17fb2191e4a555a3a95a1bf9f0b0bdf4846913225862ead8e888d84c6972bf2ec01836040516106a89190610b2b565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f826040516106df9190610b2b565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a5678816040516107169190610b2b565b60405180910390a161072661072e565b505050505050565b6107366109da565b6103f46000610aac565b610748610877565b816008600082825461075a9190610c3d565b9250508190555080600960008282546104409190610c3d565b61077b6109da565b6001600160a01b0381166107a5576000604051631e4fbdf760e01b81526004016103eb9190610b2b565b6107ae81610aac565b50565b6001546001600160a01b03163314806107d457506006546001600160a01b031633145b806107e957506004546001600160a01b031633145b6103f45760405162461bcd60e51b815260206004820152605360248201527f416374697665506f6f6c3a2043616c6c6572206d75737420626520426f72726f60448201527f7765724f7065726174696f6e732c2054726f76654d616e616765722c206f722060648201527224b73a32b932b9ba2930ba32a6b0b730b3b2b960691b608482015260a4016103eb565b6001546001600160a01b031633148061089a57506006546001600160a01b031633145b806108af57506005546001600160a01b031633145b6103f45760405162461bcd60e51b815260206004820152605360248201527f416374697665506f6f6c3a2043616c6c6572206973206e65697468657220426f60448201527f72726f7765724f7065726174696f6e73206e6f722054726f76654d616e6167656064820152721c881b9bdc8814dd18589a5b1a5d1e541bdbdb606a1b608482015260a4016103eb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b50509050806109d55760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b60448201526064016103eb565b505050565b6000546001600160a01b031633146103f4573360405163118cdaa760e01b81526004016103eb9190610b2b565b6001600160a01b038116610a5d5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016103eb565b803b8061052f5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016103eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b2557610b25610afc565b92915050565b6001600160a01b0391909116815260200190565b60008060408385031215610b5257600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610b7857600080fd5b919050565b60008060408385031215610b9057600080fd5b610b9983610b61565b946020939093013593505050565b60008060008060008060c08789031215610bc057600080fd5b610bc987610b61565b9550610bd760208801610b61565b9450610be560408801610b61565b9350610bf360608801610b61565b9250610c0160808801610b61565b9150610c0f60a08801610b61565b90509295509295509295565b600060208284031215610c2d57600080fd5b610c3682610b61565b9392505050565b81810381811115610b2557610b25610afc56fea2646970667358221220ca1eb583dbc8552c8b96ce29fc408466e0ae00cad3c253e56af3bd78585ac4c364736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100e25760003560e01c8063715018a611610085578063715018a6146102535780637c04cce1146102685780638da5cb5b14610288578063a69bdf16146102a6578063aac1846f146102bb578063ab11fadd146102db578063b7f8cf9b146102fb578063e5a4bed31461031b578063f2fde38b1461033057600080fd5b80630b622ab21461014357806314a6bf0f146101795780631529a6391461019c5780632a9043ec146101b157806354c46661146101d15780635a4d28bb146101f357806362502169146102135780636cfb6bf91461023357600080fd5b3661013e576100ef610350565b34600760008282546101019190610b12565b90915550506007546040519081527f51e7c30439c76308c020a84ca2a666735d3baa69d070e13beaf83e15bb697eb39060200160405180910390a1005b600080fd5b34801561014f57600080fd5b50600554610163906001600160a01b031681565b6040516101709190610b2b565b60405180910390f35b34801561018557600080fd5b5061018e6103f6565b604051908152602001610170565b3480156101a857600080fd5b5060075461018e565b3480156101bd57600080fd5b50600254610163906001600160a01b031681565b3480156101dd57600080fd5b506101f16101ec366004610b3f565b61040d565b005b3480156101ff57600080fd5b50600654610163906001600160a01b031681565b34801561021f57600080fd5b506101f161022e366004610b7d565b61048e565b34801561023f57600080fd5b506101f161024e366004610ba7565b610533565b34801561025f57600080fd5b506101f161072e565b34801561027457600080fd5b50600454610163906001600160a01b031681565b34801561029457600080fd5b506000546001600160a01b0316610163565b3480156102b257600080fd5b5060085461018e565b3480156102c757600080fd5b50600354610163906001600160a01b031681565b3480156102e757600080fd5b506101f16102f6366004610b3f565b610740565b34801561030757600080fd5b50600154610163906001600160a01b031681565b34801561032757600080fd5b5060095461018e565b34801561033c57600080fd5b506101f161034b366004610c1b565b610773565b6001546001600160a01b031633148061037357506003546001600160a01b031633145b6103f45760405162461bcd60e51b815260206004820152604160248201527f416374697665506f6f6c3a2043616c6c6572206973206e65697468657220426f60448201527f72726f7765724f7065726174696f6e73206e6f722044656661756c7420506f6f6064820152601b60fa1b608482015260a4015b60405180910390fd5b565b60006009546008546104089190610b12565b905090565b6104156107b1565b81600860008282546104279190610b12565b9250508190555080600960008282546104409190610b12565b90915550506008546009546040517f9c9231087215d0ccca20a3c98640429f2ea8bdd6498c53843c06d1138b8c94fa9261048292908252602082015260400190565b60405180910390a15050565b610496610877565b80600760008282546104a89190610c3d565b90915550506007546040519081527f51e7c30439c76308c020a84ca2a666735d3baa69d070e13beaf83e15bb697eb39060200160405180910390a1604080516001600160a01b0384168152602081018390527f342693d2465f6f44931e41128424a0227e0cbc69d1c3917a839e6de71696d44c910160405180910390a161052f828261093d565b5050565b61053b6109da565b61054486610a07565b61054d85610a07565b61055684610a07565b61055f83610a07565b61056882610a07565b61057181610a07565b600180546001600160a01b03199081166001600160a01b0389811691909117909255600280548216888416179055600380548216878416179055600480548216868416179055600580548216858416179055600680549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed98590610603908890610b2b565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d8560405161063a9190610b2b565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b846040516106719190610b2b565b60405180910390a17fb2191e4a555a3a95a1bf9f0b0bdf4846913225862ead8e888d84c6972bf2ec01836040516106a89190610b2b565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f826040516106df9190610b2b565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a5678816040516107169190610b2b565b60405180910390a161072661072e565b505050505050565b6107366109da565b6103f46000610aac565b610748610877565b816008600082825461075a9190610c3d565b9250508190555080600960008282546104409190610c3d565b61077b6109da565b6001600160a01b0381166107a5576000604051631e4fbdf760e01b81526004016103eb9190610b2b565b6107ae81610aac565b50565b6001546001600160a01b03163314806107d457506006546001600160a01b031633145b806107e957506004546001600160a01b031633145b6103f45760405162461bcd60e51b815260206004820152605360248201527f416374697665506f6f6c3a2043616c6c6572206d75737420626520426f72726f60448201527f7765724f7065726174696f6e732c2054726f76654d616e616765722c206f722060648201527224b73a32b932b9ba2930ba32a6b0b730b3b2b960691b608482015260a4016103eb565b6001546001600160a01b031633148061089a57506006546001600160a01b031633145b806108af57506005546001600160a01b031633145b6103f45760405162461bcd60e51b815260206004820152605360248201527f416374697665506f6f6c3a2043616c6c6572206973206e65697468657220426f60448201527f72726f7765724f7065726174696f6e73206e6f722054726f76654d616e6167656064820152721c881b9bdc8814dd18589a5b1a5d1e541bdbdb606a1b608482015260a4016103eb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b50509050806109d55760405162461bcd60e51b815260206004820152601260248201527114d95b991a5b99c8109510c819985a5b195960721b60448201526064016103eb565b505050565b6000546001600160a01b031633146103f4573360405163118cdaa760e01b81526004016103eb9190610b2b565b6001600160a01b038116610a5d5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016103eb565b803b8061052f5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016103eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b2557610b25610afc565b92915050565b6001600160a01b0391909116815260200190565b60008060408385031215610b5257600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610b7857600080fd5b919050565b60008060408385031215610b9057600080fd5b610b9983610b61565b946020939093013593505050565b60008060008060008060c08789031215610bc057600080fd5b610bc987610b61565b9550610bd760208801610b61565b9450610be560408801610b61565b9350610bf360608801610b61565b9250610c0160808801610b61565b9150610c0f60a08801610b61565b90509295509295509295565b600060208284031215610c2d57600080fd5b610c3682610b61565b9392505050565b81810381811115610b2557610b25610afc56fea2646970667358221220ca1eb583dbc8552c8b96ce29fc408466e0ae00cad3c253e56af3bd78585ac4c364736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3627,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3629,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "collSurplusPoolAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3631,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "defaultPoolAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3633,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "interestRateManagerAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3635,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3637,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "troveManagerAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3639,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "collateral",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3641,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "principal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3643,
        "contract": "contracts/ActivePool.sol:ActivePool",
        "label": "interest",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}